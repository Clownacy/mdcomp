; ---------------------------------------------------------------------------
; New format based on Kosinski. It changes several design decisions to allow
; a faster decompressor without loss of compression ratio.
; Created originally by Flamewing and vladikcomper (by discussions on IRC),
; further improvements by Clownacy.
; ---------------------------------------------------------------------------
; Permission to use, copy, modify, and/or distribute this software for any
; purpose with or without fee is hereby granted.
;
; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ---------------------------------------------------------------------------
; FUNCTION:
; 	zKosPlusDec
;
; DESCRIPTION
; 	Kosinski+ Decompressor
;
; INPUT:
; 	hl	Source address
; 	de	Destination address
; ---------------------------------------------------------------------------
_zKosPlus_ReadBit macro
	dec	c								; Have all 8 bits been used up?
	jr	nz, .skip						; Branch if not.
	dbra	d2,.skip
	ld	b, (hl)							; Get desc field byte.
	inc	hl
	ld	c, 8							; Set repeat count to 8.
.skip:
	rl	b								; Get a bit from the bitstream.
	endm
; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; ---------------------------------------------------------------------------
zKosPlusDec:
	ld	c, 1							; Set to reload a new byte.
	jr	.FetchNewCode
; ---------------------------------------------------------------------------
.FetchCodeLoop:
	; Code 1 (Uncompressed byte).
	ldi
	inc	bc								; Compensate for ldi

.FetchNewCode:
	_zKosPlus_ReadBit
	jr	c, .FetchCodeLoop				; If code = 1, branch.

	; Codes 00 and 01.
	_zKosPlus_ReadBit
	jr	c, .Code_01

	; Code 00 (Dictionary ref. short).
	xor	a
	_zKos_ReadBit
	rla
	_zKos_ReadBit
	rla
	push	bc							; Save bitstream info
	ld	c, (hl)							; Get the displacement byte
	inc	hl								; Move past the displacement byte
	ld	b, -1							; bc = displacement

.StreamCopy:
	push	hl							; Save input position
	ld	l, e
	ld	h, d							; hl = pointer to output
	add	hl, bc							; hl = pointer to source of data to copy from
	ld	c, a
	ld	b, 0							; bc = number of copies-2

	ldir
	ldi
	ldi
	pop	hl								; Restore input position
	pop	bc								; Restore bitstream bits
	jr	.FetchNewCode
; ---------------------------------------------------------------------------
.Code_01:
	; Code 01 (Dictionary ref. long / special).
	push	bc							; Save bitstream bits
	ld	a, (hl)							; a = %HHHHHCCC.
	or	7								; a = %HHHHH111.
	rra									; a = %1HHHHH11.
	rra									; a = %11HHHHH1.
	rra									; a = %111HHHHH.
	ld	b, a							; b = %111HHHHH.
	ld	a, (hl)							; a = %HHHHHCCC.
	inc	hl								; Move past the displacement byte
	ld	c, (hl)							; bc = %111HHHHH LLLLLLLL.
	inc	hl								; Move past the displacement byte
	and	7								; a = %00000CCC = 10-number of copies
	jr	z, .LargeCopy					; if CCC=0, branch.
	neg									; a = number of copies-10
	add	a, 8							; a = number of copies-2
	jr	.StreamCopy
; ---------------------------------------------------------------------------
.LargeCopy:
	; special mode (extended counter)
	ld	a, (hl)							; a = number of copies-8
	or	a
	ret	z								; If cnt=0, quit decompression.

	inc	hl								; Move past the count byte
	push	hl							; Save input position
	ld	l, e
	ld	h, d							; hl = pointer to output
	add	hl, bc							; hl = pointer to source of data to copy from

	ld	bc, 8
	ldir
	ld	c, a
	ld	b, 0							; bc = number of copies-8
	ldir
	pop	hl								; Restore input position
	pop	bc								; Restore bitstream bits
	jr	.FetchNewCode
; ===========================================================================
